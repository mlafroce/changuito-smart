#!/usr/bin/env python3
import json
import logging
from datetime import date

import requests

from .domainEntities import Product, Price, DomainEncoder, Branch, Category

AGENT_USER = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
BRANCH_PARAMS_LIMIT = 30
PRODUCT_PARAMS_LIMIT = 100


#
# class ScrapperA:
#     def __init__(self, **kwargs):
#         self.name = kwargs.get("name")
#         self.url = kwargs.get("url", "https://d3e6htiiul5ek9.cloudfront.net")
#         self.endpoint = kwargs.get("endpoint")
#         self.dst_url = kwargs.get("dst_url")
#         self.dst_endpoint = kwargs.get("dst_endpoint")
#         self.enpoint_limit_result = kwargs.get("limit", 30)
#         self.domain = kwargs.get("domain")
#         self.encoder = kwargs.get("domain_encoder")
#
#     def scrap(self):
#         datavieja = self._get_data()
#         url = f"{self.dst_url}{self.dst_endpoint}"
#         response = requests.post(url, json=json.dumps(datavieja, cls=self.encoder))
#         logging.info(response.json())
#
#     def _get_data(self):
#         logging.info(f'Getting {self.name}...')
#         response = self._send_request()
#         datavieja = self._to_domain(response["sucursales"])
#         currentOffset = self.enpoint_limit_result
#         # while len(datavieja) == currentOffset:
#         #     response = self._send_request(currentOffset)
#         #     datavieja += self._to_domain(response["sucursales"])
#         #     currentOffset += self.enpoint_limit_result
#         logging.info(f'>>> {len(datavieja)} {self.name} were found')
#         return datavieja
#
#     def _send_request(self, offset=0):
#         url = f"{self.url}{self.endpoint}"
#         logging.info(f"Getting datavieja from {url} with offset {offset}")
#         return requests.get(url,
#                             params={"limit": self.enpoint_limit_result,
#                                     "offset": offset},
#                             headers={'User-Agent': AGENT_USER}
#                             ).json()
#
#     def _to_domain(self, json_branch_list):
#         return list(map(lambda x: Branch(x["id"], x["sucursalNombre"],
#                                          x["lat"], x["lng"], x["direccion"], x["localidad"],
#                                          x["comercioRazonSocial"]),
#                         json_branch_list))


class BaseScrapper:
    def __init__(self, **kwargs):
        self.name = kwargs.get("name")
        self.url = kwargs.get("url", "https://d3e6htiiul5ek9.cloudfront.net")
        self.endpoint = kwargs.get("endpoint")
        self.dst_url = kwargs.get("dst_url")
        self.dst_endpoint = kwargs.get("dst_endpoint")
        self.enpoint_limit_result = kwargs.get("limit")
        self.domain = kwargs.get("domain")
        self.encoder = kwargs.get("domain_encoder")

    def scrap(self):
        logging.info(f'{self.name} - Scrapping starts...')
        currentOffset = 0
        current_data = []
        total_data = []
        while len(total_data) == currentOffset:
            response = self._get_data(limit=self.enpoint_limit_result, offset=currentOffset)
            current_data = self._map_to_domain(response)
            total_data += current_data
            response = self._send_data(current_data)
            currentOffset += self.enpoint_limit_result
            logging.info(f'{self.name} - Sending {len(current_data)}... getting {response.json()}')
        logging.info(f"{self.name} - Scrapping ends")
        return total_data

    def _get_data(self, **params):
        try:
            url = f"{self.url}{self.endpoint}"
            logging.info(f"Getting data from {url} with offset {params.get('offset', '-')}")
            print(requests.get(url,
                               params=params,
                               headers={'User-Agent': AGENT_USER}
                               ))
            return requests.get(url,
                                params=params,
                                headers={'User-Agent': AGENT_USER}
                                ).json()
        except Exception as error:
            logging.error(f"Something Wrong _get_data: {error}")

    def _send_data(self, data):
        dst_url = f"{self.dst_url}{self.dst_endpoint}"
        return requests.post(dst_url, json=json.dumps(data, cls=self.encoder))

    def _map_to_domain(self, json_data):
        pass


class BranchesScrapper(BaseScrapper):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # Los parametros permitidos en esta consulta de sucursales son:
        # lat, lng, limit, offset, sucursal_provincia, sucursal_tipo,
        # comercio_bandera_nombre, comercio_razon_social, distancia_min, distancia_max, entorno.

    def _map_to_domain(self, json_data):
        json_branch_list = json_data["sucursales"]
        return list(map(lambda x: self.domain(x["id"], x["sucursalNombre"],
                                              x["lat"], x["lng"], x["direccion"], x["localidad"],
                                              x["comercioRazonSocial"]),
                        json_branch_list))


class CategoriesScrapper(BaseScrapper):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def _get_data(self, **params):
        url = f"{self.url}{self.endpoint}"
        logging.info(f"Getting data from {url}")
        return requests.get(url, headers={'User-Agent': AGENT_USER}).json()

    def _map_parents(self, categories):
        categories_id_by_name = {}
        for category in categories:
            categories_id_by_name[category["nombre"]] = category["id"]
        for category in categories[1:3]:
            parents_id = [categories_id_by_name[x] for x in category["padres"]]
            category["padres"] = parents_id
        return categories

    def _map_to_domain(self, json_data):
        json_branch_list = self._map_parents(json_data["categorias"])
        return list(map(lambda x: self.domain(x["id"], x["nombre"],
                                              x["nivel"], x["padres"]),
                        json_branch_list))


class ProductsScrapper(BaseScrapper):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.branch_scrapper = kwargs.get("branch_scrapper")
        self.category_scrapper = kwargs.get("category_scrapper")  # TODO ver si meter categoria

    def _map_to_domain(self, json_data):
        json_list = json_data["productos"]
        return list(
            map(lambda x: self.domain(x["id"], x["marca"], x["nombre"], x["precioMin"], x["precioMax"]), json_list))

    def scrap(self):
        logging.info(f'{self.name} - Scrapping starts...')
        # branches = self.branch_scrapper.scrap()
        branches_id = '16-1-1302,2011-1-245,2011-1-241,2011-1-246,9-1-140,2011-1-254,2011-1-248,10-1-112,2008-1-410,10-1-171,10-1-175,2005-1-72,9-3-5251,15-1-8005,2003-2-10070,15-1-1804,15-1-820,2003-1-7540,9-1-655,2003-1-7470,9-1-110,9-1-657,9-1-656,15-1-821,15-1-806,15-1-1802,15-1-824,15-1-810,15-1-8013,15-1-8017,15-1-819,15-1-815,15-1-1801,15-1-8006,2003-1-7840,9-1-64,9-1-658,9-1-731,15-1-8014,15-1-8016,15-1-813,9-1-980,15-1-8008,9-1-40,15-1-1800,15-1-803,2011-1-234,15-1-1805,15-1-825,15-1-8009,15-1-811,2011-1-237,36-3-32,2005-1-13,10-3-521,2-1-260,13-1-111,2005-1-16,12-1-67,10-2-252,3-1-2,3-1-1428,10-3-428,3000-2-5018,10-1-23,10-2-388,10-3-451,9-2-37,2003-1-7140,2-1-148,2-1-100,2011-1-36,10-2-101,2004-1-11,12-1-101,2003-1-7490,3-1-1584,13-1-56,13-1-20,2-1-185,2005-1-9,2005-1-59,2011-1-260,9-1-122,9-1-127,2003-2-10010,13-1-54,13-1-6,13-1-110,13-1-46,13-1-15,13-1-25,13-1-4,13-1-50,13-1-5,13-1-9,10-2-114,13-1-35,13-1-10,13-1-51,13-1-28,13-1-53,13-1-44,13-1-33,13-1-12,13-1-11,13-1-32,13-1-18,13-1-42,13-1-13,13-1-23,13-1-49,13-1-24,13-1-128,21-1-19,10-1-58,36-6-40,2005-1-28,12-1-183,10-3-453,9-2-112,2011-1-46,2008-1-624,13-1-115,10-3-437,9-3-5214,12-1-123,9-2-163,13-1-40,2005-1-29,23-1-6297,23-1-6296,10-3-495,23-1-6277,3-1-1735,10-1-227,12-1-130,13-1-91,2003-1-7530,2005-1-4,2-1-058,10-3-458,15-1-5497,15-1-1078,15-1-5291,15-1-353,15-1-5464,15-1-5315,15-1-5498,15-1-5257,15-1-5313,15-1-571,15-1-5266,15-1-5392,15-1-5478,15-1-1034,15-1-5132,15-1-5520,15-1-174,15-1-5383,15-1-5435,15-1-5441,15-1-5396,15-1-5542,15-1-5208,15-1-1536,15-1-149,15-1-1030,15-1-131,15-1-5530,15-1-5477,15-1-101,15-1-156,15-1-5357,15-1-452,15-1-5507,15-1-5455,15-1-5397,15-1-5217,15-1-5407,15-1-1015,15-1-5134,15-1-1083,15-1-1017,15-1-260,15-1-1047,15-1-5388,15-1-5338,15-1-5377,15-1-5348,15-1-5321,15-1-171,15-1-248,15-1-5222,15-1-273,15-1-5431,15-1-5398,15-1-5386,15-1-1040,15-1-140,15-1-5219,15-1-5245,15-1-250,15-1-61,15-1-1031,15-1-127,15-1-1039,15-1-5496,15-1-5552,15-1-1505,15-1-5461,15-1-5118,15-1-5426,15-1-1026,15-1-5439,15-1-5380,15-1-5465,15-1-5528,15-1-5485,15-1-5545,15-1-1070,15-1-5487,15-1-5425,15-1-5312,15-1-5343,15-1-5142,15-1-5445,15-1-234,15-1-143,15-1-5553,15-1-5363,15-1-5443,15-1-342,15-1-289,15-1-1019,15-1-5344,15-1-148,15-1-5306,15-1-5188,15-1-5486,15-1-5316,15-1-5298,15-1-161,15-1-5307,15-1-5394,15-1-157,15-1-5309,15-1-1038,15-1-123,15-1-5180,15-1-5413,15-1-5268,15-1-251,15-1-313,15-1-5281,15-1-1041,15-1-5430,15-1-100,15-1-5168,15-1-5399,15-1-5409,15-1-185,15-1-5457,15-1-5136,15-1-5446,15-1-5516,15-1-5449,15-1-5508,15-1-5529,15-1-5374,15-1-1037,15-1-5260,15-1-5235,15-1-258,15-1-110,15-1-5416,15-1-5456,15-1-5147,15-1-5337,15-1-265,15-1-5403,15-1-1021,15-1-5149,15-1-5212,15-1-5418,15-1-5301,15-1-1539,15-1-177,15-1-202,15-1-675,15-1-5526,15-1-283,15-1-5433,15-1-5178,15-1-5280,15-1-116,15-1-165,15-1-5562,15-1-5510,15-1-5503,15-1-5293,15-1-5551,15-1-5327,15-1-5366,15-1-5437,15-1-5423,15-1-1088,15-1-5187,15-1-5475,15-1-5341,15-1-5483,15-1-5533,15-1-5541,15-1-5480,15-1-5328,15-1-5157,15-1-172,15-1-5472,15-1-105,15-1-150,15-1-83,15-1-1534,15-1-104,15-1-1036,15-1-122,15-1-106,15-1-1035,15-1-190,15-1-141,15-1-257,15-1-212,15-1-216,15-1-287,15-1-160,15-1-1020,15-1-1029,15-1-231,15-1-102,15-1-9,15-1-28,15-1-81,15-1-14,15-1-233,15-1-25,15-1-1008,15-1-1032,15-1-253,15-1-163,15-1-278,15-1-96,15-1-44,15-1-1025,15-1-152,15-1-276,15-1-70,15-1-226,15-1-1023,15-1-68,15-1-210,15-1-1007,15-1-82,15-1-203,15-1-53,15-1-120,15-1-1004,15-1-1012,15-1-118,15-1-74,15-1-1003,15-1-113,15-1-1002,15-1-155,15-1-1009,15-1-78,15-1-1027,15-1-80,15-1-145,15-1-1014,15-1-103,15-1-57,15-1-119,15-1-180,15-1-40,15-1-73,15-1-89,15-1-64,15-1-138,15-1-270,15-1-48,15-1-98,15-1-176,15-1-170,15-1-1018,15-1-71,15-1-59,15-1-151,15-1-54,15-1-1006,15-1-19,15-1-237,15-1-55,15-1-297,15-1-201,15-1-66,15-1-93,15-1-63,15-1-51,15-1-125,15-1-5084,15-1-1525,15-1-310,15-1-43,15-1-41,15-1-204,15-1-130,15-1-169,15-1-1024,15-1-126,15-1-87,15-1-129,15-1-220,15-1-1028,15-1-213,15-1-280,15-1-132,15-1-1022,15-1-77,15-1-128,15-1-256,15-1-146,15-1-139,15-1-186,15-1-37,15-1-243,15-1-154,15-1-76,15-1-39,15-1-279,15-1-222,15-1-298,15-1-30,15-1-199,15-1-183,15-1-187,15-1-179,15-1-67,15-1-184,15-1-207,15-1-10,15-1-84,15-1-79,15-1-230,15-1-23,15-1-1010,15-1-264,15-1-147,15-1-26,15-1-275,15-1-158,15-1-182,15-1-134,15-1-99,15-1-137,15-1-88,15-1-1535,15-1-194,15-1-92,15-1-107,15-1-62,15-1-94,15-1-1507,15-1-1011,15-1-5172,15-1-5144,15-1-441,15-1-5163,15-1-5166,15-1-5401,15-1-5484,15-1-5422,15-1-5195,15-1-5567,15-1-5432,15-1-5122,15-1-5376,15-1-5476,15-1-5495,15-1-5421,15-1-569,15-1-5429,15-1-5428,15-1-5323,15-1-338,15-1-5458,15-1-5406,15-1-5111,15-1-5499,15-1-598,15-1-5324,15-1-5561,15-1-5547,15-1-5479,15-1-5138,15-1-5285,15-1-5299,15-1-5292,15-1-5244,15-1-5546,15-1-5200,15-1-5370,15-1-5549,15-1-5162,15-1-5566,15-1-5225,15-1-5513,15-1-5482,15-1-5434,15-1-5452,15-1-5420,15-1-499,15-1-5447,15-1-5140,15-1-5534,15-1-5506,15-1-5537,15-1-5438,15-1-5532,15-1-5167,15-1-1075,15-1-5395,15-1-5345,15-1-5473,15-1-5544,15-1-5176,15-1-5131,15-1-5115,15-1-367,15-1-5169,15-1-5474,15-1-5286,15-1-5210,15-1-5274,15-1-5453,15-1-5442,15-1-5414,15-1-5143,15-1-5128,15-1-5331,15-1-5489,15-1-5501,10-3-448,13-1-7,10-2-208,23-1-6201,23-1-6209,10-1-232,12-1-117,23-1-6203,2011-1-57,9-2-740,9-1-703,35-1-1,10-2-201,2005-1-22,2-1-118,2-1-069,13-1-73,10-3-637,9-1-234,10-3-439,12-1-199,9-2-156,2003-1-7510,9-1-155,9-3-5208,2005-1-8,2-1-055,2011-1-121,3-1-1389,10-2-203,2-1-057,2005-1-7,9-1-8,9-2-111,12-1-129,3-1-1426,10-2-205,2-1-089,3000-2-5023,13-1-22,13-1-47,13-1-48,13-1-29,13-1-26,13-1-86,2005-1-44,10-3-433,9-3-662,10-3-638,10-3-443,10-1-234,3-1-1736,23-1-6204,2004-1-24,12-1-154,2011-1-76,2011-1-146,12-1-171,10-3-496,12-1-189,2003-1-7520,10-3-452,10-1-49,23-1-6285,10-3-444,10-3-449,2-1-117,12-1-38,12-1-197,2003-1-7000,2003-2-7030,2003-2-7031,2003-1-7060,36-3-26,13-1-3,13-1-55,13-1-87,12-1-204,10-1-239,2011-1-87,9-3-5626,9-1-697,2011-1-297,10-1-297,10-3-524,2011-1-82,2005-1-15,13-1-78,2005-1-10,2-1-127,10-3-455,10-1-56,10-3-457,2003-1-7340,2011-1-274,2004-1-12,12-1-178,10-3-494,10-3-471,10-3-498,2011-1-100,10-3-427,13-1-94,10-2-218,10-1-10,10-3-472,9-1-164,13-1-1,10-3-468,2-1-8015,2-1-9021,23-1-6295,3-1-1425,3-1-1478,10-1-36,2011-1-88,12-1-131,2004-1-13,10-3-425,10-2-278,2005-1-37,2005-1-14,2-1-173,2005-1-58,2005-1-2,2005-1-26,2-1-085,9-1-912,2011-1-69,9-1-767,2004-1-25,2004-1-23,12-1-192,2005-1-39,10-3-522,10-3-483,10-3-499,10-3-480,10-3-477,12-1-75,12-1-186,9-1-692,9-1-20,10-3-466,10-3-459,10-3-447,10-3-460,10-3-445,13-1-136,10-2-144,2008-1-191,12-1-149,2005-1-76,2004-1-15,1000-1-1,10-2-109,10-1-8,9-1-36,25-1-1,3-1-66,3-1-1344,9-1-636,9-1-638,9-2-42,9-1-640,2003-1-7120,9-1-633,2003-1-7780,3000-2-5022,3-1-65,9-2-62,13-1-97,3-1-1682,2005-1-5,12-1-68,2005-1-6,2-1-101,2011-1-116,2004-1-10,2003-1-7180,9-3-5204,13-1-112,9-1-702,2004-1-30,10-3-464,2004-1-27,10-1-52,10-3-422,10-1-231,10-3-461,12-1-107,3-1-584,2003-2-7970,2003-1-7790,9-2-9,10-3-450,10-3-438,2011-1-291,2003-1-7170,9-1-162,2011-1-62,10-1-241,10-3-424,12-1-184,10-1-11,10-3-435,2011-1-258,12-1-49,13-1-125,10-1-22,13-1-93,10-2-130,10-2-191,13-1-92,21-1-27,21-1-9,2008-1-204,21-1-14,21-1-24,21-1-15,21-1-8,21-1-5,21-1-1,21-1-26,21-1-2,21-1-3,21-1-21,21-1-11,21-1-6,21-1-23,21-1-18,21-1-4,21-1-28,21-1-10,2005-1-78,21-1-13,21-1-16,21-1-17,21-1-7,9-2-59,2011-1-257,9-2-58,9-1-942,9-1-56,9-1-241,9-2-55,9-2-231,2003-1-7560,9-2-57,2003-1-7860,2011-1-280,10-1-47,2008-1-660,2011-1-150,9-3-5202,3-1-1157,2003-1-7390,10-2-209,10-2-211,10-2-226,10-1-183,23-1-6239,13-1-88,13-1-89,2-1-201,9-1-165,10-1-42,10-3-479,10-3-497,10-3-474,2004-1-16,9-1-159,2003-2-10040,2011-1-316,21-1-22,9-1-983,10-3-446,12-1-105,10-1-16,9-1-698,13-1-98,13-1-85,10-1-21,2004-1-28,12-1-219,10-3-467,9-1-160,2003-1-7320,2003-2-7950,9-2-161,12-1-215,9-1-153,9-2-154,2011-1-74,2004-1-2,10-3-442,2003-2-10100,2004-1-17,10-3-441,21-1-20,13-1-39,13-1-38,21-1-33,13-1-134,2005-1-31,2008-1-50,9-1-51,2011-1-256,2003-1-7150,2005-1-12,10-2-296,13-1-36,13-1-37,10-1-139,13-1-59,10-2-518,10-2-253,10-1-204,3-1-56,9-3-5275,2004-1-5,10-3-478,10-3-484,13-1-14,2005-1-20,2-1-125,13-1-106,13-1-109,2005-1-24,10-2-255,10-1-229,9-1-669,2011-1-118,13-1-21,10-1-28,12-1-155,10-2-62,10-2-512,23-1-6208,2004-1-26,12-1-162,2011-1-119,9-3-5211,2003-1-7730,3-1-1291,13-1-137,21-1-34,3-1-1450,9-2-49,2004-1-8,13-1-31,13-1-68,13-1-19,13-1-34,13-1-57,13-1-17,2011-1-259,12-1-69,13-1-72,12-1-104,10-3-462,23-1-6279,10-1-7,10-3-454,12-1-65,23-1-6283,2004-1-1,2003-1-7810,9-3-5034,9-3-5207,12-1-51,9-2-152,2011-1-151,10-3-473,10-3-475,36-5-73,10-3-456,3-1-631,2011-1-37,9-1-668,13-1-8,36-3-25,2005-1-11,9-1-677,2005-1-23,2-1-096,2011-1-306,10-3-482,10-3-485,12-1-208,9-1-150,9-2-248,2005-1-21,9-1-52,10-2-272,10-1-25,3-1-1439,3-1-1438,9-3-628,2011-1-104,2003-2-10050,23-1-6212,23-1-6210,10-2-202,10-1-1,10-2-516,10-2-254,12-1-70,2011-1-105,9-2-1,3-1-1158,9-2-235,10-1-12,2004-1-3,2011-1-190,3000-2-5014,2003-1-7250,12-1-111,2004-1-4,12-1-57,3000-2-5012,10-1-15,10-3-430,10-3-669,10-1-217,10-3-755,10-3-469,2004-1-14,2003-2-7990,2011-1-292,2011-1-31,10-2-256,10-1-156,13-1-126,2005-1-49,2005-1-41,2011-1-34,9-1-631,12-1-53,12-1-64,2003-1-7160,3-1-1401,2004-1-22,10-2-134,10-1-57,2005-1-18,10-1-31,9-1-711,36-4-51,10-3-481,12-1-94,9-1-944,10-1-40,2004-1-18,10-2-221,10-3-440,10-1-51,13-1-41,2011-1-302,3000-2-5019,9-2-61,2003-1-7740,2-1-103,13-1-104,2-1-203,2005-1-25,13-1-45,13-1-27,2005-1-27,13-1-30,9-1-704,3-1-1716,3-1-1717,10-3-463,23-1-6280,23-1-6275,23-1-6278,12-1-188,2007-1-1,3000-2-5017,9-2-4,10-1-2,10-2-216,10-3-431,10-3-436,10-3-787,10-2-212,10-3-802,10-3-429,12-1-164,9-3-5205,10-3-470,10-3-476,13-1-130,9-2-50,9-2-45,13-1-90,12-1-92,10-3-465,23-1-6213,23-1-6292,23-1-6293,2011-1-56,10-1-210,2004-1-20,9-3-138,12-1-91,12-1-41,12-1-84,12-1-74,12-1-42,12-1-203,12-1-47,12-1-45,12-1-22,12-1-20,12-1-44,12-1-66,12-1-43,12-1-220,2003-1-7130,2003-1-7830,1002-1-6,1002-1-2,1002-1-1,2003-1-7480,2003-1-7760,2003-1-7190,2003-1-7200,2003-1-7110,2003-1-7280,2003-1-7500,2003-1-7260,2003-1-7330,1002-1-4,2003-1-7570,2003-1-7240,1002-1-3,2013-1-1,2003-1-7270,2003-2-7980,2003-1-7220,2003-1-7820,2003-1-7210,1002-1-5,2003-1-7230,12-1-88,12-1-116,2008-1-630,2011-1-154,12-1-153,12-1-160,12-1-108,12-1-168,12-1-103,12-1-170,12-1-167,12-1-124,12-1-180,12-1-159,12-1-158,12-1-200,12-1-174,12-1-80,12-1-163,12-1-136,12-1-176,12-1-175,3-1-1539,15-1-782,15-1-766,15-1-467,15-1-735,15-1-679,15-1-795,3-1-1469,15-1-288,15-1-558,15-1-299,15-1-1098,15-1-721,15-1-1543,15-1-708,15-1-361,15-1-678,15-1-219,15-1-905,15-1-776,15-1-1538,15-1-798,15-1-350,15-1-291,15-1-435,15-1-1520,15-1-748,15-1-666,15-1-637,15-1-1080,15-1-352,15-1-485,15-1-389,15-1-1072,15-1-764,15-1-277,15-1-111,15-1-784,15-1-417,15-1-711,15-1-375,15-1-1100,15-1-542,15-1-763,15-1-668,15-1-755,15-1-649,15-1-770,15-1-630,15-1-618,15-1-142,15-1-663,15-1-552,15-1-403,15-1-1532,15-1-368,15-1-772,15-1-907,15-1-572,15-1-568,15-1-239,3-1-1066,15-1-704,15-1-903,15-1-563,15-1-359,15-1-527,15-1-757,15-1-424,15-1-115,15-1-7,15-1-344,15-1-164,3-1-1132,15-1-767,15-1-440,15-1-431,15-1-747,15-1-393,15-1-573,15-1-576,15-1-547,15-1-365,3-1-1230,3-1-1553,15-1-509,15-1-1524,15-1-567,15-1-364,15-1-1533,15-1-469,15-1-242,15-1-354,15-1-418,15-1-439,3-1-1695,15-1-588,15-1-740,15-1-136,15-1-394,15-1-447,15-1-457,15-1-738,15-1-698,15-1-478,15-1-468,15-1-1101,15-1-337,15-1-522,15-1-480,15-1-414,15-1-515,15-1-614,15-1-565,15-1-429,15-1-793,15-1-347,15-1-262,15-1-133,15-1-682,15-1-358,15-1-737,15-1-1090,15-1-521,3-1-3,3-1-31,15-1-691,15-1-428,15-1-756,15-1-642,15-1-1521,15-1-720,15-1-206,15-1-356,15-1-302,15-1-308,15-1-919,15-1-492,15-1-912,3-1-1507,15-1-745,15-1-1074,15-1-692,15-1-730,15-1-638,15-1-463,15-1-662,15-1-377,15-1-647,15-1-619,15-1-369,15-1-456,15-1-741,15-1-380,15-1-490,15-1-752,15-1-754,15-1-422,15-1-263,15-1-1527,15-1-1542,15-1-592,15-1-448,15-1-796,15-1-789,15-1-430,3-1-36,15-1-634,15-1-379,15-1-723,15-1-773,15-1-410,15-1-168,15-1-771,15-1-108,15-1-274,15-1-413,15-1-405,15-1-712,15-1-706,15-1-316,15-1-671,15-1-639,15-1-218,15-1-391,15-1-366,15-1-387,3-1-1068,15-1-586,15-1-208,15-1-1526,15-1-1066,15-1-644,15-1-384,15-1-408,15-1-360,15-1-209,15-1-710,15-1-611,15-1-530,15-1-727,15-1-531,15-1-686,15-1-8,15-1-355,15-1-27,15-1-189,15-1-513,15-1-505,15-1-709,15-1-481,15-1-705,15-1-470,15-1-390,15-1-760,15-1-910,15-1-383,15-1-596,15-1-498,15-1-792,15-1-5,15-1-254,15-1-271,15-1-124,15-1-532,15-1-475,15-1-473,15-1-914,15-1-560,15-1-743,15-1-570,15-1-628,15-1-300,15-1-562,15-1-1091,15-1-497,15-1-362,15-1-482,15-1-217,15-1-461,15-1-561,15-1-683,15-1-117,15-1-420,15-1-501,15-1-412,15-1-205,15-1-684,15-1-1086,15-1-555,15-1-758,15-1-769,15-1-707,15-1-751,15-1-900,15-1-736,15-1-774,15-1-797,15-1-728,3-1-29,15-1-520,15-1-459,15-1-934,15-1-785,15-1-718,15-1-407,15-1-11,15-1-20,15-1-42,15-1-479,15-1-324,15-1-269,15-1-31,15-1-6,15-1-29,15-1-290,15-1-224,15-1-16,15-1-13,15-1-24,15-1-304,15-1-1,15-1-284,15-1-35,15-1-198,15-1-293,15-1-685,15-1-4,15-1-85,15-1-307,15-1-321,15-1-32,15-1-317,15-1-1099,15-1-591,15-1-597,15-1-306,15-1-49,15-1-3,15-1-633,15-1-346,15-1-629,15-1-245,15-1-214,15-1-90,15-1-627,15-1-197,15-1-21,15-1-36,15-1-56,15-1-46,15-1-58,15-1-500,15-1-45,15-1-109,15-1-301,15-1-75,15-1-266,15-1-286,15-1-631,15-1-50,15-1-268,15-1-91,15-1-241,15-1-223,15-1-52,15-1-615,15-1-303,15-1-69,15-1-261,15-1-272,15-1-12,15-1-60,15-1-47,15-1-33,15-1-252,15-1-612,15-1-65,15-1-465,15-1-474,15-1-920,15-1-502,15-1-716,15-1-932,15-1-1097,3-1-599,15-1-486,15-1-489,15-1-687,15-1-915,15-1-672,15-1-579,15-1-641,15-1-794,15-1-397,15-1-581,15-1-427,15-1-336,15-1-750,15-1-688,15-1-749,15-1-395,15-1-908,15-1-525,15-1-607,15-1-528,15-1-574,15-1-689,15-1-791,15-1-536,15-1-731,15-1-472,15-1-488,15-1-921,15-1-382,15-1-466,15-1-396,15-1-476,15-1-669,15-1-349,15-1-733,15-1-690,15-1-510,15-1-537,15-1-653,15-1-409,15-1-5271,15-1-693,15-1-484,15-1-744,15-1-402,15-1-538,15-1-455,15-1-753,15-1-717,15-1-620,15-1-788,15-1-938,15-1-1531,15-1-557,15-1-511,15-1-670,4-1-289,15-1-339,15-1-673,15-1-493,15-1-700,15-1-936,15-1-400,15-1-916,15-1-904,15-1-901,15-1-729,3-1-1482,15-1-533,15-1-790,15-1-746,15-1-734,15-1-559,15-1-386,15-1-5353,15-1-713,15-1-404,15-1-540,15-1-923,15-1-694,15-1-5267,15-1-696,15-1-1102,15-1-529,15-1-786,15-1-535,15-1-378,15-1-446,15-1-777,15-1-415,15-1-548,15-1-411,15-1-742,15-1-739,15-1-381,15-1-768,15-1-421,15-1-661,15-1-930,15-1-658,15-1-787,15-1-587,15-1-436,15-1-703,15-1-697,15-1-699,15-1-714,15-1-911,15-1-363,15-1-929,3-1-1506,15-1-454,15-1-523,15-1-761,15-1-578,15-1-451,15-1-464,15-1-544,15-1-608,15-1-371,15-1-477,15-1-491,15-1-487,15-1-909,15-1-657,15-1-551,15-1-507,15-1-508,12-1-125,9-1-119,9-2-38,9-3-5276,2011-1-166,2011-1-158,2011-1-156,2011-1-157,2011-1-207,9-3-5260,9-2-237,9-3-5206,9-1-700,9-2-701,9-3-5201,9-1-240,9-3-5263,9-3-121,9-2-14,9-2-247,9-2-18,9-2-30,9-2-15,9-1-696,9-3-5961,9-2-22,9-2-23,9-1-19,9-2-3,2011-1-206,9-2-977,9-2-54,9-3-5213,9-2-46,9-3-5259,9-2-48,9-2-916,9-3-5231,9-1-741,2011-1-284,9-1-10,9-1-665,9-2-137,9-2-107,9-2-39,9-2-25,9-2-12,9-2-2,9-2-35,2011-1-293,23-1-6216,23-1-6217,23-1-6230,23-1-6233,23-1-6237,23-1-6219,23-1-6276,23-1-6227,23-1-6226,23-1-6222,23-1-6214,23-1-6291,23-1-6218,23-1-6215,23-1-6229,23-1-6236,23-1-6228,23-1-6287,23-1-6224,23-1-6225,23-1-6221,23-1-6220,23-1-6223,10-3-373,10-3-528,10-3-695,10-3-677,10-3-687,10-3-376,10-3-732,10-3-343,10-3-632,10-3-317,10-3-775,10-3-661,10-3-630,10-3-251,10-3-299,10-3-531,10-3-678,10-3-318,10-3-557,10-3-416,10-3-579,10-3-326,10-1-5,10-3-711,10-3-566,10-3-265,10-3-561,10-3-621,10-2-386,10-3-421,10-3-488,10-3-662,10-3-391,10-3-349,10-2-120,10-2-198,10-3-356,10-3-412,10-3-489,10-3-369,10-3-423,10-3-796,10-3-672,10-3-548,10-3-582,10-3-613,10-3-808,10-3-715,10-2-381,10-3-577,10-3-573,10-2-490,10-3-199,10-3-196,10-3-761,10-3-397,10-3-780,10-2-189,10-3-402,10-3-580,10-3-683,10-3-400,10-3-609,10-3-339,10-3-360,10-3-583,10-2-510,10-3-362,10-3-725,10-3-667,10-1-219,10-3-699,10-3-547,10-2-228,10-3-649,10-3-604,10-2-515,10-3-395,10-2-519,10-3-337,10-3-596,10-3-665,10-3-420,10-3-409,10-3-307,10-3-327,10-3-652,10-3-260,10-1-30,10-2-385,10-3-689,10-3-363,10-3-370,10-3-742,10-3-605,10-3-405,10-3-691,10-3-247,10-3-658,10-3-754,10-3-723,10-3-726,10-3-733,10-3-688,10-3-404,10-1-271,10-2-491,10-2-258,10-2-237,10-3-627,10-3-735,10-3-301,10-3-355,10-3-679,10-2-277,10-2-215,10-2-390,10-2-511,10-3-398,10-2-148,10-3-348,10-3-628,10-3-530,10-3-552,10-3-615,10-3-200,10-2-151,10-3-623,10-2-115,10-1-220,10-3-774,10-3-763,10-3-415,10-3-414,10-3-486,10-3-586,10-3-588,10-3-396,10-3-757,10-2-389,10-3-394,10-2-116,10-3-403,10-3-760,10-3-314,10-3-741,10-3-740,10-3-636,10-3-724,10-3-752,10-3-560,10-3-646,10-3-791,10-3-698,10-3-729,10-2-206,10-3-332,10-3-378,10-3-599,10-3-633,10-3-640,10-3-622,10-3-777,10-3-618,10-3-778,10-3-783,10-3-697,10-3-747,10-3-309,10-3-680,10-3-418,10-3-673,10-3-716,10-3-572,10-3-312,10-3-493,10-3-331,10-3-336,10-3-537,10-3-554,10-3-676,10-3-310,10-3-364,10-3-659,10-3-595,10-3-525,10-3-368,10-3-335,10-3-553,10-3-570,10-3-322,10-3-569,10-3-324,10-3-600,10-3-575,10-3-539,10-3-374,10-3-592,10-3-351,10-3-565,10-3-593,10-3-302,10-3-751,10-3-375,10-3-367,10-3-411,10-3-298,10-3-739,10-3-798,10-3-417,10-3-527,10-3-306,10-3-781,10-3-574,10-3-328,10-3-300,10-3-556,10-3-795,10-3-555,10-3-670,10-3-563,10-3-538,10-3-654,10-3-526,10-3-350,10-3-594,10-3-744,10-3-792,10-1-6,10-3-392,10-3-347,10-3-809,10-3-315,10-1-214,10-3-686,10-3-668,10-3-544,10-3-581,10-3-660,10-3-717,10-2-182,10-3-487,10-3-631,10-3-329,10-3-545,10-3-585,10-3-645,10-3-308,10-3-541,10-3-748,10-3-788,10-3-344,10-3-534,10-3-684,10-3-361,10-3-617,10-3-551,10-3-311,10-3-313,10-3-426,10-3-323,10-3-727,10-3-657,10-3-625,10-3-546,10-3-634,10-3-614,10-3-535,10-3-710,10-3-365,10-3-624,10-3-692,10-3-797,10-3-664,10-3-576,10-3-419,10-3-371,10-3-568,10-2-195,10-3-543,10-3-380,10-3-334,10-3-213,10-3-354,10-3-685,10-3-639,10-3-693,10-3-492,10-3-590,10-3-408,10-3-589,10-3-291,10-3-773,10-3-626,10-3-316,10-3-619,10-3-536,10-3-616,10-3-352,10-3-587,10-3-533,10-3-406,10-3-597,10-3-562,10-2-150,10-3-558,10-3-357,10-3-598,10-3-731,10-3-550,10-3-542,10-3-643,10-3-745,10-3-608,10-3-799,10-3-346,10-3-320,10-3-671,10-3-714,10-3-571,10-3-303,10-3-559,10-3-721,10-3-591,10-3-338,10-3-694,10-3-410,10-3-734,10-3-413,10-3-682,10-3-341,10-3-529,10-3-656,10-2-118,10-3-325,10-3-674,10-1-26,10-3-719,10-3-782,12-1-19,12-1-52,12-1-90,12-1-48,12-1-60,12-1-40,12-1-55,12-1-39,12-1-37,12-1-121,12-1-85,12-1-61,12-1-46,12-1-18,12-1-24,12-1-26,12-1-56,12-1-151,12-1-7,12-1-2,12-1-63,12-1-6,12-1-181,3000-2-5021,12-1-78,12-1-25,12-1-58,12-1-82,12-1-35,12-1-110,12-1-83,12-1-59,2011-1-198,2005-1-43,2008-1-32,10-2-137,2003-1-7410,9-1-860,2011-1-172,9-1-853,10-1-235,2005-1-38,2008-1-31,9-1-423,2011-1-175,9-1-685,2011-1-78,2005-1-56,2011-1-123,2005-1-47,2011-1-54,10-1-233,10-2-138,2005-1-46,2011-1-58,2011-1-275,9-1-854,2011-1-290,20-1-1,2011-1-61,2011-1-178,15-1-1046,15-1-624,15-1-626,15-1-1045,15-1-594,15-1-6064,15-1-593,15-1-621,15-1-433,15-1-1506,15-1-1061,15-1-539,15-1-600,15-1-564,15-1-584,15-1-655,15-1-1508,15-1-524,15-1-654,15-1-589,15-1-534,15-1-6063,15-1-323,15-1-625,15-1-320,15-1-1050,15-1-432,15-1-1503,15-1-327,15-1-1504,15-1-1043,15-1-325,15-1-305,15-1-1502,15-1-1501,15-1-635,15-1-1044,15-1-319,15-1-326,15-1-659,15-1-1056,15-1-556,15-1-550,15-1-549,15-1-6058,15-1-590,15-1-609,15-1-6039,15-1-434,15-1-664,15-1-518,15-1-6047,15-1-553,15-1-1516,15-1-1054,15-1-1055,15-1-495,15-1-442,15-1-1518,15-1-443,15-1-677,2011-1-181,2011-1-90,10-1-240,2005-1-48,2011-1-305,2011-1-53,9-1-686,20-1-4,2011-1-91,2011-1-117,20-1-3,20-1-2,12-1-109,2005-1-52,2008-1-649,2011-1-52,9-1-943,2011-1-142,2011-1-51,2003-1-7310,10-2-249,10-2-266,10-2-262,10-2-244,10-2-264,10-2-243,10-2-181,10-2-263,10-2-125,2003-2-7930,2011-1-199,2011-1-222,2011-1-215,2011-1-171,2011-1-79,2008-1-366,2008-1-358,2008-1-180,2011-1-134,10-2-135,2008-1-57,2005-1-74,9-1-705,2011-1-144,2003-2-10110,9-1-708,2008-1-369,2008-1-439,2011-1-242,16-1-1002,2011-1-252,2008-1-608,2005-1-73,9-1-730,9-1-887,9-1-13,2011-1-232,2011-1-255,2000-1-138,2000-1-327,2000-1-645,2000-1-838,2000-1-280,2000-1-8,2000-1-303,2008-1-633,2000-1-323,16-1-902,10-1-44,2008-1-445,2005-1-80,9-1-674,2000-1-534,2000-1-14,2000-1-494,2000-1-5,2000-1-465,2000-1-7,2005-1-70,2011-1-202,2011-1-225,15-1-809,15-1-1806,15-1-1808,15-1-8018,15-1-823,15-1-1807,2011-1-213,2011-1-60,10-1-123,16-1-1102,2005-1-55,9-1-194,9-1-193,9-1-414,2003-1-7440,2003-1-7450,2003-2-10090,9-1-413,9-1-544,9-1-415,9-1-417,9-1-410,2011-1-309,9-1-815,9-1-408,2008-1-652,2011-1-59,2011-1-212,2011-1-204,2008-1-29,2011-1-211,2011-1-140,2011-1-223,9-1-243,9-1-505,9-1-550,9-1-769,2005-1-75,10-1-178,10-2-132,9-1-242,2-1-187,13-1-52,2005-1-19,2005-1-34,2008-1-55,2-1-109,2-1-196,13-1-75,2011-1-169,13-1-16,2-1-149,2-1-090,2005-1-17,10-1-147,2005-1-30,13-1-76,2-1-143,2-1-122,2-1-105,2-1-202,10-2-184,13-1-67,2011-1-308,2011-1-55,9-1-184,9-3-5225,9-1-548,2005-1-54,2011-1-89,9-1-803,16-1-1402,10-2-290,9-1-175,2003-1-7360,9-1-170,9-3-5222,2011-1-165,9-1-174,9-1-176,9-1-171,10-1-17,2011-1-168,9-1-856,9-1-190,9-1-179,2005-1-69,2011-1-63,9-1-220,10-2-289,2005-1-71,2011-1-112,9-1-401,9-1-187,9-1-914,2011-1-176,10-2-282,10-2-283,12-1-209,2005-1-79,2008-1-636,10-2-288,10-1-29,10-2-287,9-1-182,2011-1-92,2011-1-64,2003-2-7960,9-1-546,9-1-855,9-1-188,9-1-402,9-1-183,9-1-192,9-1-180,9-1-399,2011-1-179,9-1-398,9-1-857,2011-1-107,2005-1-57,9-1-868,9-1-584,9-1-191,2011-1-67,2005-1-68,2011-1-81,9-1-185,10-2-286,9-1-545,2003-1-7430,9-1-189,2011-1-94,9-1-181,9-1-172,9-1-173,9-1-196,9-1-400,2000-1-272,2000-1-253,2008-1-646,2000-1-18,2000-1-215,2000-1-301,2000-1-275,2000-1-377,2000-1-65,5-1-3,16-1-1502,5-1-7,5-1-6,5-1-4,5-1-1,2008-1-627,5-1-5,5-1-2,2003-1-7710,2000-1-130,2000-1-3,2000-1-470,2000-1-384,2000-1-294,2000-1-134,2000-1-387,10-1-55,10-2-141,2008-1-621,2000-1-354,2000-1-4,2000-1-308,2-1-266,13-1-117,2-1-213,13-1-96,13-1-95,13-1-69,13-1-70,13-1-71,13-1-132,13-1-131,2-1-228,13-1-127,13-1-114,2-1-259,2011-1-250,2-1-147,13-1-133,13-1-129,13-1-118,2-1-235,2-1-226,2-1-068,2-1-248,2-1-232,2-1-239,2-1-225,2-1-006,2-1-162,2-1-233,2-1-240,12-1-185,2005-1-53,2005-1-60,2-1-229,2-1-236,2-1-237,2008-1-78,9-1-902,2011-1-273,2003-2-10060,2003-1-7460,2011-1-261,2003-1-7380,9-3-5216,2003-1-7750,10-1-53,10-1-157,13-1-124,13-1-113,13-1-84,2-1-076,13-1-100,2-1-234,2-1-182,2-1-172,2005-1-61,2-1-212,2-1-102,13-1-119,13-1-123,13-1-122,2-1-177,2-1-050,2-1-247,13-1-108,2-1-230,2011-1-264,13-1-107,2-1-053,13-1-80,13-1-79,10-1-149,2011-1-296,13-1-105,2-1-188,2005-1-64,2011-1-267,13-1-99,13-1-66,2005-1-62,13-1-101,2-1-216,2011-1-262,2-1-265,13-1-83,13-1-58,2-1-242,13-1-116,2005-1-66,2-1-238,13-1-121,13-1-65,2-1-164,2-1-007,2-1-051,2008-1-243,2005-1-65,2-1-243,9-1-433,2011-1-263,2-1-165,2-1-018,13-1-82,13-1-81,10-1-136,2-1-010,2-1-195,2005-1-67,13-1-62,2-1-092,2-1-042,2-1-241,13-1-60,13-1-61,9-1-910,9-1-901,2011-1-249,13-1-74,13-1-102,2-1-208,13-1-103,2-1-215,13-1-43,2-1-046,2011-1-251,2-1-009,2-1-175,2-1-004,2-1-084,2-1-008,2005-1-81,2-1-163,2-1-047,2005-1-51,13-1-120,2-1-011,13-1-77,2011-1-265,2-1-048,13-1-63,13-1-64,2005-1-63,2-1-246,2011-1-266,23-1-6294,2011-1-272,2011-1-218,2011-1-25,23-1-6265,2008-1-400,2011-1-216,2011-1-42,2008-1-14,2011-1-194,12-1-118,2011-1-16,12-1-179,2-1-153,2011-1-28,12-1-96,9-1-430,2011-1-24,2-1-152,2008-1-1,2008-1-104,16-1-2702,2-1-151,2-1-150,2011-1-138,2011-1-276,2011-1-6,22-1-17,22-1-26,10-1-18,22-1-11,23-1-6257,12-1-165,22-1-18,22-1-24,22-1-16,23-1-6256,23-1-6264,16-1-1202,22-1-20,10-1-32,22-1-6,22-1-1,10-1-41,22-1-31,22-1-5,12-1-95,2008-1-424,10-1-33,23-1-6262,2008-1-643,10-1-268,23-1-6260,2008-1-655,12-1-99,12-1-97,22-1-3,2011-1-29,2011-1-115,2011-1-30,2011-1-289,2011-1-70,2003-1-7550,2003-1-7290,2003-2-10080,2011-1-83,9-3-5218,2011-1-155,2011-1-23,2-1-114,2011-1-32,2011-1-203,2-1-156,2-1-171,2011-1-27,2008-1-427,2011-1-35,2008-1-605,2011-1-301,2011-1-26,2011-1-20,15-1-244,15-1-211,15-1-6052,15-1-438,15-1-225,15-1-282,15-1-1059,2003-1-7300,15-1-6045,15-1-6017,2011-1-287,2011-1-2,2011-1-5,2011-1-271,2011-1-286,2011-1-170,2011-1-285,15-1-1068,2003-2-10020,2011-1-4,2-1-261,2008-1-10,13-1-135,2011-1-196,2008-1-13,2011-1-195,2-1-067,2005-1-3,10-1-259,2011-1-33,9-2-953,2011-1-187,2005-1-32,2011-1-45,22-1-23,2011-1-39,2011-1-224,9-1-904,2011-1-243,9-1-906,2011-1-235,9-1-903,16-1-702,16-1-802,2008-1-430,2008-1-418,2011-1-253,9-1-71,2011-1-239,2011-1-231,9-1-72,9-1-660,9-1-958,9-1-73,9-1-134,9-1-125,9-1-727,9-1-659,2011-1-288,2003-2-1000,10-2-176,10-1-46,10-2-177,2011-1-240,9-1-728,2003-1-7850,10-2-601,9-1-70,9-3-5227,2003-1-7870,2-1-021,2-1-024,2-1-025,13-1-138,2-1-159,13-1-145,10-1-292,13-1-141,2-1-023,13-1-140,13-1-143,2-1-218,13-1-139,13-1-142,10-1-128,2-1-022,2011-1-152,9-3-5277,2-1-017,2-1-189,2-1-015,2011-1-185,2-1-207,2-1-257,2-1-181,10-2-165,2-1-167,10-1-179,2-1-014,2-1-045,2011-1-106,2011-1-311,9-1-706,13-1-144,2-1-179,2-1-013,2011-1-188,2-1-104,10-1-45,2-1-134,10-2-146,2-1-019,2-1-012,2-1-016,2-1-044,10-1-162,2011-1-132,2011-1-148,9-1-752,2-1-168,2-1-037,2-1-074,2-1-035,2-1-220,2-1-036,2003-1-7660,10-1-142,10-1-180,2-1-211,10-1-161,2-1-056,2-1-075,2-1-166,2-1-038,2-1-141,2003-1-7650,2003-2-7940,2003-1-7800,2000-1-333,10-1-159,2008-1-442,10-2-110,2000-1-569,2003-1-7720,15-1-623,2000-1-172,15-1-582,15-1-610,15-1-1077,15-1-602,15-1-604,15-1-1089,15-1-1069,2000-1-2,15-1-632,15-1-1063,15-1-1064,15-1-651,15-1-1073,15-1-575,2000-1-91,2000-1-667,2-1-206,9-1-688,2000-1-72,2000-1-491,2000-1-141,2000-1-132,2000-1-80,9-1-691,2000-1-391,2005-1-45,2008-1-25,2011-1-209,9-2-725,9-2-954,10-2-295,2-1-351,9-1-478,16-2-6004,16-1-602,16-2-4604,16-2-5604,16-1-2502,16-2-6104,16-1-102,16-2-5704,16-2-5504,16-1-202,16-2-5904,16-2-5404,16-2-4804,16-2-4204,16-2-4104,16-2-5204,23-1-6255,2005-1-77,23-1-6286,2008-1-37,2008-1-352,2008-1-38,2011-1-143,2011-1-315,2011-1-135,2011-1-192,2011-1-221,9-1-473,9-1-466,9-1-472,9-1-476,9-2-439,9-1-455,2003-1-7400,2003-1-7630,9-1-437,9-2-29,9-2-436,9-1-475,9-1-434,9-2-709,9-2-460,9-1-453,2003-1-7670,9-2-444,9-1-440,9-1-32,15-1-1513,15-1-1515,9-3-451,9-2-28,9-2-60,9-2-435,9-2-33,9-2-441,2003-1-7370,2011-1-294,2011-1-126,9-1-114,15-1-1060,2011-1-210,9-1-485,2003-1-7640,9-2-468,9-1-432,10-3-767,10-3-644,10-3-766,10-3-641,10-3-807,10-3-810,10-3-610,10-3-764,10-3-784,10-3-648,10-3-765,10-3-607,10-3-736,10-3-789,10-3-642,10-3-776,10-3-720,10-3-768,10-3-790,10-3-770,10-3-806,10-3-772,10-3-786,10-3-794,10-3-606,10-3-785,10-3-793,10-3-769,10-3-650,10-3-771,10-3-762,2003-2-10030,2008-1-30,2011-1-180,9-2-450,2011-1-227,9-2-842,2011-1-219,10-1-24,2008-1-27,2011-1-279,9-2-456,2-1-119,2011-1-220,2005-1-42,2008-1-28,2011-1-186,9-2-452,2-1-264,9-1-503,2011-1-310,2-1-221,10-1-50,2008-1-398,9-2-843,2011-1-269,2005-1-35,2008-1-7,9-1-195,9-1-479,2011-1-147,2011-1-129,9-1-113,2003-1-7420,10-2-119,2008-1-22,2011-1-208,2005-1-40,2008-1-8,9-1-690,2011-1-133,2008-1-5,2011-1-183,9-1-464,2008-1-403,23-1-6269,9-2-583,10-1-54,2008-1-421,2005-1-50,2011-1-173,9-2-448,9-2-449,9-2-233,2008-1-83,2011-1-131,2005-1-36,2008-1-6,9-1-232,2011-1-174,10-1-9,10-2-168,10-2-167,9-1-729,2011-1-244,2011-1-247,2011-1-238,2011-1-236,2008-1-612,9-1-645,2011-1-233,2011-1-295,9-1-646,2-1-204,2-1-031,2-1-032,2-1-217,2-1-131,2-1-161,2011-1-184,2-1-197,2-1-160,2011-1-230,2-1-214,2-1-186,2-1-145,2011-1-191,2-1-184,2-1-097,2-1-263,2-1-033,2-1-198,2-1-200,2-1-183,2-1-199,2-1-072,2-1-124,2-1-205,2-1-043,2-1-091,2011-1-95,10-2-143,10-1-48,2-1-192,10-1-63,2-1-138,1001-1-2,1001-1-3,1001-1-1'  # ','.join([x.id for x in branches])
        total_data = []
        currentOffset = 0
        while len(total_data) == currentOffset:
            response = self._get_data(limit=self.enpoint_limit_result, offset=currentOffset,
                                      array_sucursales=branches_id)
            current_data = self._map_to_domain(response)
            response = self._send_data(current_data)
            total_data += current_data
            currentOffset += self.enpoint_limit_result
            logging.info(f'{self.name} - Sending {len(current_data)}... getting {response.json()}')
        return total_data


class PriceScrapper2(BaseScrapper):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.branch_scrapper = kwargs.get("branch_scrapper")

    def _map_to_domain(self, json_data, branch_id=None):
        json_list = json_data["productos"]
        return list(map(lambda x: self.domain(x["id"], branch_id, x["precio"], date.today()), json_list))

    def scrap(self):
        logging.info(f'{self.name} - Scrapping starts...')
        branches = self.branch_scrapper.scrap()
        for branch in branches:
            logging.info(f'{self.name} - Scrapping by branch {branch.name} {branch.trade_name}...')
            current_data = self._scrap_by_branch(branch.id)
            response = self._send_data(current_data)
            logging.info(f'{self.name} - Sending {len(current_data)}... getting {response.json()}')

    def _scrap_by_branch(self, branch_id):
        currentOffset = 0
        total_data = []
        while len(total_data) == currentOffset:
            response = self._get_data(limit=self.enpoint_limit_result, offset=currentOffset, id_sucursal=branch_id)
            total_data += self._map_to_domain(response)
            currentOffset += self.enpoint_limit_result
        return total_data


class PriceScrapper:
    def __init__(self, **kwargs):
        self.name = "PRICE SCRAPPER"
        self.scrap_url = kwargs.get("scrap_url", "https://d3e6htiiul5ek9.cloudfront.net")
        self.scrap_endpoints = kwargs.get("scrap_endpoints")
        self.dst_url = kwargs.get("dst_url")
        self.dst_endpoints = kwargs.get("dst_endpoints")
        self.enpoint_limit_result = kwargs.get("limit")
        self.branch_scrapper = BranchesScrapper(dst_url=self.dst_url,
                                                dst_endpoint=self.dst_endpoints["branches"],
                                                url=self.scrap_url, endpoint=self.scrap_endpoints["branches"], limit=100,
                                                domain=Branch, domain_encoder=DomainEncoder, name="BRANCH SCRAPPER"
                                                )
        self.categories_scrapper = CategoriesScrapper(dst_url=self.dst_url,
                                                      dst_endpoint=self.dst_endpoints["categories"],
                                                      url=self.scrap_url, endpoint=self.scrap_endpoints["categories"],
                                                      limit=30,
                                                      domain=Category, domain_encoder=DomainEncoder,
                                                      name="CATEGORY SCRAPPER"
                                                      )

    def _map_products(self, json_data):
        json_list = json_data["productos"]
        return list(map(lambda x: Product(x["id"], x["marca"], x["nombre"], x["precioMin"], x["precioMax"]), json_list))

    def _map_prices(self, json_data, branch_id=None):
        json_list = json_data["productos"]
        return list(map(lambda x: Price(x["id"], branch_id, x["precio"], str(date.today())), json_list))

    def _send_products(self, data):
        try:
            dst_url = f"{self.dst_url}{self.dst_endpoints['products']}"
            response = requests.post(dst_url, json=json.dumps(data, cls=DomainEncoder))
            return response.json()
        except Exception as error:
            logging.error(f"Something Wrong _send_products: {error}")

    def _send_prices(self, data):
        try:
            dst_url = f"{self.dst_url}{self.dst_endpoints['prices']}"
            response = requests.post(dst_url, json=json.dumps(data, cls=DomainEncoder))
            return response.json()
        except Exception as error:
            logging.error(f"Something Wrong _send_prices: {error}")

    def _get_data(self, **params):
        try:
            url = f"{self.scrap_url}{self.scrap_endpoints['products']}"
            logging.info(f"Getting data from {url}  offset {params.get('offset')}")
            return requests.get(url, params=params, headers={'User-Agent': AGENT_USER}).json()
        except Exception as error:
            logging.error(f"Something Wrong _get_data: {error}")

    def scrap(self):
        logging.info(f'{self.name} - Scrapping starts...')
        branches = self.branch_scrapper.scrap()
        for branch in branches:
            logging.info(f'{self.name} - Scrapping starts by branch {branch.name} {branch.trade_name}...')
            current_products, current_prices = self._scrap_by_branch(branch.id)
            if len(current_products) == 0 or len(current_prices) == 0:
                logging.info(f'{self.name} - Scrapping ends by branch {branch.name} {branch.trade_name}...')
                continue
            response_prod = self._send_products(current_products)
            logging.info(f'{self.name} - Sending products {len(current_products)}... getting {response_prod}')
            response_pric = self._send_prices(current_prices)
            logging.info(f'{self.name} - Sending prices {len(current_prices)}... getting {response_pric}')
            logging.info(f'{self.name} - Scrapping ends by branch {branch.name} {branch.trade_name}...')
        logging.info(f'{self.name} - Scrapping ends...')

    def _scrap_by_branch(self, branch_id):
        currentOffset = 0
        total_products = []
        total_prices = []
        while len(total_products) == currentOffset:
            response = self._get_data(limit=self.enpoint_limit_result, offset=currentOffset, id_sucursal=branch_id)
            total_products += self._map_products(response)
            total_prices += self._map_prices(response, branch_id)
            currentOffset += self.enpoint_limit_result
        return total_products, total_prices
